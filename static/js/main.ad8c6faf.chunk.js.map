{"version":3,"sources":["firebase.js","CardInput.js","DeleteButton.js","CardTracker.js","FooterText.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CardInput","handleChange","event","setState","userInput","target","value","console","log","state","handleClick","preventDefault","database","ref","push","card","action","htmlFor","onChange","this","type","id","onClick","Component","DeleteButton","cardCompare","myCard","props","thisCard","deleteCard","cards","map","eachCard","CardTracker","apiData","newCardObj","key","name","className","src","image_uris","normal","alt","cmc","mana_cost","oracle_text","FooterText","href","App","cardID","child","remove","cardData","apiCards","on","snapshot","data","val","newCardsArray","propertyName","axiosArr","newerCardObj","axios","post","identifiers","then","response","xmlns","viewBox","fill","fillOpacity","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad8c6faf.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA-LzH3x6y4GOQRQvK4Htenjgf7DMYWrro\",\r\n  authDomain: \"spencer-davis-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://spencer-davis-project-five.firebaseio.com\",\r\n  projectId: \"spencer-davis-project-five\",\r\n  storageBucket: \"spencer-davis-project-five.appspot.com\",\r\n  messagingSenderId: \"998632952490\",\r\n  appId: \"1:998632952490:web:4493592177e848c8cab6d3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\n\r\nclass CardInput extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n      card: \"\",\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState(\r\n      {\r\n        userInput: event.target.value,\r\n      },\r\n      // necessary when we need to wait for state to finish setting before updating the page\r\n      () => {\r\n        console.log(this.state.userInput);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.push(this.state.userInput);\r\n\r\n    this.setState({\r\n      userInput: \"\",\r\n      card: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form action=\"submit\">\r\n        <label htmlFor=\"newCard\">Add a card to your collection</label>\r\n        <input\r\n          onChange={this.handleChange}\r\n          // this is called \"binding your input\" and is a project 5 requirement\r\n          value={this.state.userInput}\r\n          type=\"text\"\r\n          id=\"newCard\"\r\n        />\r\n\r\n        <button onClick={this.handleClick}>Add Card</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass DeleteButton extends Component {\r\n  cardCompare = (myCard) => {\r\n    if (myCard == this.props.thisCard) {\r\n      return (\r\n        <button\r\n          onClick={() => {\r\n            this.props.deleteCard(myCard.id);\r\n          }}\r\n        >\r\n          Remove Card\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.cards.map((eachCard) => {\r\n          this.cardCompare(eachCard.card);\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React, { Component } from \"react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nclass CardTracker extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.apiData.map((newCardObj) => {\r\n          return (\r\n            <li key={newCardObj.name} className=\"displayCard\">\r\n              <div className=\"displayCardInner\">\r\n                <div className=\"displayCardFront\">\r\n                  <div className=\"imageContainer\">\r\n                    <img\r\n                      src={newCardObj.image_uris.normal}\r\n                      alt={newCardObj.name}\r\n                    ></img>\r\n                    <h2>{newCardObj.name}</h2>\r\n                  </div>\r\n                </div>\r\n                <div className=\"displayCardBack\">\r\n                  <ul>\r\n                    <li>cmc: {newCardObj.cmc}</li>\r\n                    <li>mana cost: {newCardObj.mana_cost}</li>\r\n                    <li>oracle text: {newCardObj.oracle_text}</li>\r\n                  </ul>\r\n                  <DeleteButton\r\n                    thisCard={newCardObj.name}\r\n                    cards={this.props.cards}\r\n                    deleteCard={this.props.deleteCard}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardTracker;\r\n","import React from \"react\";\r\n\r\nconst FooterText = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p>copyright &copy; spencer davis 2020</p>\r\n      <p>\r\n        created @\r\n        <a href=\"https://junocollege.com/\" target=\"_blank\">\r\n          Juno College\r\n        </a>\r\n      </p>\r\n      <p>data courtesy of the scryfall api</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterText;\r\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport axios from \"axios\";\nimport CardInput from \"./CardInput\";\nimport \"./App.scss\";\nimport CardTracker from \"./CardTracker\";\nimport FooterText from \"./FooterText\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: [],\n      cardData: {},\n      apiCards: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      // event listener for db value change\n\n      const data = snapshot.val();\n\n      console.log(data);\n\n      const newCardsArray = [];\n\n      for (let propertyName in data) {\n        const newCardObj = {\n          id: propertyName,\n          card: data[propertyName],\n        };\n        newCardsArray.push(newCardObj);\n      }\n\n      const axiosArr = [];\n\n      for (let propertyName in data) {\n        const newerCardObj = {\n          name: data[propertyName],\n        };\n        axiosArr.push(newerCardObj);\n      }\n\n      this.setState(\n        {\n          cards: newCardsArray,\n          cardData: axiosArr,\n        },\n        () => {\n          axios\n            .post(\"https://api.scryfall.com/cards/collection\", {\n              identifiers: this.state.cardData,\n            })\n            .then((response) => {\n              this.setState({\n                apiCards: response.data.data,\n              });\n            });\n        }\n      );\n    });\n  }\n\n  deleteCard = (cardID) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(cardID).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>magic: the gathering collection manager</h1>\n            <CardInput />\n          </div>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n            <path\n              fill=\"#36382e\"\n              fillOpacity=\"1\"\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\n            ></path>\n          </svg>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <CardTracker\n              deleteCard={this.deleteCard}\n              cards={this.state.cards}\n              apiData={this.state.apiCards}\n            />\n            {/* <ApiAppender apiData={this.state.apiCards} /> */}\n          </div>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n            <path\n              fill=\"#273e47\"\n              fillOpacity=\"1\"\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\n            ></path>\n          </svg>\n        </main>\n        <footer>\n          <FooterText />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}