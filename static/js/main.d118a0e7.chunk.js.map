{"version":3,"sources":["firebase.js","components/DeleteButton.js","components/CardTracker.js","components/FooterText.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DeleteButton","props","cards","length","tabIndex","aria-label","onClick","deleteCard","thisCard","id","CardTracker","this","map","newCardObj","index","key","className","src","card","image_uris","normal","alt","name","mana_cost","cmc","oracle_text","Component","FooterText","href","App","handleClick","event","preventDefault","axios","url","method","responseType","params","exact","state","userInput","then","response","setState","data","database","ref","push","catch","error","alert","handleChange","target","value","cardID","child","remove","on","snapshot","val","newCardsArray","propertyName","action","htmlFor","onChange","type","autoComplete","placeholder","replace","xmlns","viewBox","aria-labelledby","fill","fillOpacity","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d118a0e7.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA-LzH3x6y4GOQRQvK4Htenjgf7DMYWrro\",\r\n  authDomain: \"spencer-davis-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://spencer-davis-project-five.firebaseio.com\",\r\n  projectId: \"spencer-davis-project-five\",\r\n  storageBucket: \"spencer-davis-project-five.appspot.com\",\r\n  messagingSenderId: \"998632952490\",\r\n  appId: \"1:998632952490:web:4493592177e848c8cab6d3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React from \"react\";\r\n\r\nconst DeleteButton = (props) => {\r\n  return (\r\n    <>\r\n      {/* ensure user can never fully empty database */}\r\n      {props.cards.length > 1 ? (\r\n        <button\r\n          tabIndex=\"0\"\r\n          aria-label=\"delete card from collection\"\r\n          onClick={() => {\r\n            props.deleteCard(props.thisCard.id);\r\n          }}\r\n        >\r\n          Remove Card\r\n        </button>\r\n      ) : (\r\n        <button\r\n          tabIndex=\"0\"\r\n          aria-label=\"cannot delete card collection must always have at least one card\"\r\n        >\r\n          Cannot delete card\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteButton;\r\n","import React, { Component } from \"react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nclass CardTracker extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {/* returns api data for react to append to dom */}\r\n        {this.props.cards.map((newCardObj, index) => {\r\n          return (\r\n            <li key={index} className=\"displayCard\">\r\n              <div className=\"displayCardInner\">\r\n                <div className=\"displayCardFront\">\r\n                  <div className=\"imageContainer\">\r\n                    <img\r\n                      src={newCardObj.card.image_uris.normal}\r\n                      alt={newCardObj.card.name}\r\n                    ></img>\r\n                    <h2>{newCardObj.card.name}</h2>\r\n                  </div>\r\n                </div>\r\n                <div className=\"displayCardBack\">\r\n                  <ul>\r\n                    <li>mana cost: {newCardObj.card.mana_cost}</li>\r\n                    <li>converted mana cost: {newCardObj.cmc}</li>\r\n                    <li>oracle text: {newCardObj.card.oracle_text}</li>\r\n                  </ul>\r\n                  <DeleteButton\r\n                    tabIndex=\"0\"\r\n                    thisCard={newCardObj}\r\n                    cards={this.props.cards}\r\n                    deleteCard={this.props.deleteCard}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardTracker;\r\n","import React from \"react\";\r\n\r\nconst FooterText = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p>copyright &copy; spencer davis 2020</p>\r\n      <p>\r\n        created @<a href=\"https://junocollege.com/\">Juno College</a>\r\n      </p>\r\n      <p>\r\n        data courtesy of the{\" \"}\r\n        <a href=\"https://scryfall.com/docs/api/\">scryfall api</a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterText;\r\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport \"./styles/App.scss\";\nimport axios from \"axios\";\nimport CardTracker from \"./components/CardTracker\";\nimport FooterText from \"./components/FooterText\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: [],\n      userInput: \"\",\n      card: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      // event listener for db value change\n\n      const data = snapshot.val();\n\n      const newCardsArray = [];\n\n      // state setter preparation loops\n      for (let propertyName in data) {\n        const newCardObj = {\n          id: propertyName,\n          card: data[propertyName],\n        };\n        newCardsArray.push(newCardObj);\n      }\n\n      // state setter sets state as arrays prepared from database snapshot\n      this.setState({\n        cards: newCardsArray,\n      });\n    });\n  }\n\n  // updates database on click with user input\n  handleClick = (event) => {\n    event.preventDefault();\n\n    axios({\n      url: `https://api.scryfall.com/cards/named`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        exact: `${this.state.userInput}`,\n      },\n    })\n      .then((response) => {\n        this.setState(\n          {\n            card: response.data,\n          },\n          () => {\n            const dbRef = firebase.database().ref();\n            dbRef.push(this.state.card);\n          }\n        );\n      })\n      .catch((error) => {\n        alert(\"Invalid card name! Please ensure correct spelling.\");\n      });\n\n    this.setState({\n      userInput: \"\",\n    });\n  };\n\n  // binds state to user input\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    });\n  };\n\n  // database deletion function\n  deleteCard = (cardID) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(cardID).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <div className=\"inputBox\">\n              <h1 tabIndex=\"0\">magic: the gathering collection manager</h1>\n              <p tabIndex=\"0\">\n                type a magic:the gathering card name into the box below to add\n                that card to your collection. invalid card names will not update\n                your list.\n              </p>\n              <form action=\"submit\">\n                <label htmlFor=\"newCard\">Add a card to your collection: </label>\n                <input\n                  onChange={this.handleChange}\n                  // binding input\n                  value={this.state.userInput}\n                  type=\"text\"\n                  id=\"newCard\"\n                  autoComplete=\"off\"\n                  placeholder=\"Sol Ring\"\n                  tabIndex=\"0\"\n                />\n                {/* prevent user from submitting empty string */}\n                {!this.state.userInput.replace(/\\s/g, \"\").length ? null : (\n                  <button\n                    aria-label=\"add card to collection\"\n                    onClick={this.handleClick}\n                  >\n                    Add Card\n                  </button>\n                )}\n              </form>\n            </div>\n          </div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 1440 320\"\n            aria-labelledby=\"title desc\"\n          >\n            <title>dark grey square wave</title>\n            <desc>\n              a dark grey square wave with a flat bottom and stair-stepped top\n            </desc>\n            <path\n              fill=\"#292D25\"\n              fillOpacity=\"1\"\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\n            ></path>\n          </svg>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <CardTracker\n              deleteCard={this.deleteCard}\n              cards={this.state.cards}\n            />\n          </div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 1440 320\"\n            aria-labelledby=\"title desc\"\n          >\n            <title>deep blue square wave</title>\n            <desc>\n              a deep blue square wave with a flat bottom and stair-stepped top.\n              it matches the one above.\n            </desc>\n            <path\n              fill=\"#273e47\"\n              fillOpacity=\"1\"\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\n            ></path>\n          </svg>\n        </main>\n        <footer>\n          <FooterText />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}