{"version":3,"sources":["firebase.js","components/FilterForm.js","components/DeleteButton.js","components/DisplayCard.js","components/CardTracker.js","components/FilteredCardTracker.js","components/FooterText.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FilterForm","props","name","id","autoComplete","onChange","handleFilter","aria-label","className","value","DeleteButton","tabIndex","onClick","deleteCard","thisCard","DisplayCard","src","image","alt","mana_cost","cmc","oracle_text","cards","CardTracker","map","newCardObj","index","key","card","image_uris","normal","FilteredCardTracker","includes","color","toLocaleUpperCase","FooterText","href","App","handleClick","event","preventDefault","axios","url","method","responseType","params","exact","state","userInput","then","response","setState","data","database","ref","push","alert","catch","error","handleChange","target","cardID","child","remove","on","snapshot","val","newCardsArray","propertyName","action","htmlFor","this","type","placeholder","replace","length","to","xmlns","viewBox","aria-labelledby","fill","fillOpacity","d","path","render","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a7bcc202.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA-LzH3x6y4GOQRQvK4Htenjgf7DMYWrro\",\r\n  authDomain: \"spencer-davis-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://spencer-davis-project-five.firebaseio.com\",\r\n  projectId: \"spencer-davis-project-five\",\r\n  storageBucket: \"spencer-davis-project-five.appspot.com\",\r\n  messagingSenderId: \"998632952490\",\r\n  appId: \"1:998632952490:web:4493592177e848c8cab6d3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React from \"react\";\r\n\r\nconst FilterForm = (props) => {\r\n  return (\r\n    <select\r\n      name=\"mana color\"\r\n      id=\"mana color\"\r\n      autoComplete=\"off\"\r\n      onChange={props.handleFilter}\r\n      aria-label=\"select mana color to filter collection\"\r\n      className=\"filterList\"\r\n    >\r\n      <option value=\"0\">Select color to filter collection</option>\r\n      <option value=\"w\">White</option>\r\n      <option value=\"u\">Blue</option>\r\n      <option value=\"b\">Black</option>\r\n      <option value=\"r\">Red</option>\r\n      <option value=\"g\">Green</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default FilterForm;\r\n","import React from \"react\";\r\n\r\nconst DeleteButton = (props) => {\r\n  return (\r\n    <button\r\n      tabIndex=\"0\"\r\n      aria-label=\"delete card from collection\"\r\n      className=\"deleteButton\"\r\n      onClick={() => {\r\n        props.deleteCard(props.thisCard.id);\r\n      }}\r\n    >\r\n      Remove Card\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeleteButton;\r\n","import React from \"react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nconst DisplayCard = (props) => {\r\n  return (\r\n    <div className=\"displayCardInner\">\r\n      <div className=\"displayCardFront\">\r\n        <div className=\"imageContainer\">\r\n          <img src={props.image} alt={props.name}></img>\r\n          <h2>{props.name}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"displayCardBack\">\r\n        <ul>\r\n          <li>mana cost: {props.mana_cost}</li>\r\n          <li>converted mana cost: {props.cmc}</li>\r\n          <li>oracle text: {props.oracle_text}</li>\r\n        </ul>\r\n        <DeleteButton\r\n          tabIndex=\"0\"\r\n          thisCard={props.thisCard}\r\n          cards={props.cards}\r\n          deleteCard={props.deleteCard}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayCard;\r\n","import React from \"react\";\r\nimport DisplayCard from \"./DisplayCard\";\r\n\r\nconst CardTracker = (props) => {\r\n  return (\r\n    <ul>\r\n      {/* returns api data for react to append to dom */}\r\n      {props.cards.map((newCardObj, index) => {\r\n        return (\r\n          <li key={index} className=\"displayCard\" tabIndex=\"0\">\r\n            <DisplayCard\r\n              thisCard={newCardObj}\r\n              cards={props.cards}\r\n              deleteCard={props.deleteCard}\r\n              image={newCardObj.card.image_uris.normal}\r\n              name={newCardObj.card.name}\r\n              mana_cost={newCardObj.card.mana_cost}\r\n              cmc={newCardObj.card.cmc}\r\n              oracle_text={newCardObj.card.oracle_text}\r\n            ></DisplayCard>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CardTracker;\r\n","import React from \"react\";\r\nimport DisplayCard from \"./DisplayCard\";\r\n\r\nconst FilteredCardTracker = (props) => {\r\n  return (\r\n    <ul>\r\n      {/* returns api data for react to append to dom */}\r\n      {props.cards.map((newCardObj, index) => {\r\n        if (\r\n          newCardObj.card.mana_cost.includes(props.color.toLocaleUpperCase())\r\n        ) {\r\n          return (\r\n            <li key={index} className=\"displayCard\" tabIndex=\"0\">\r\n              <DisplayCard\r\n                thisCard={newCardObj}\r\n                cards={props.cards}\r\n                deleteCard={props.deleteCard}\r\n                image={newCardObj.card.image_uris.normal}\r\n                name={newCardObj.card.name}\r\n                mana_cost={newCardObj.card.mana_cost}\r\n                cmc={newCardObj.card.cmc}\r\n                oracle_text={newCardObj.card.oracle_text}\r\n              ></DisplayCard>\r\n            </li>\r\n          );\r\n        }\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FilteredCardTracker;\r\n","import React from \"react\";\r\n\r\nconst FooterText = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p>copyright &copy; spencer davis 2020</p>\r\n      <p>\r\n        created @<a href=\"https://junocollege.com/\">Juno College</a>\r\n      </p>\r\n      <p>\r\n        data courtesy of the{\" \"}\r\n        <a href=\"https://scryfall.com/docs/api/\">scryfall api</a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterText;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport \"./styles/App.scss\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport FilterForm from \"./components/FilterForm\";\r\nimport CardTracker from \"./components/CardTracker\";\r\nimport FilteredCardTracker from \"./components/FilteredCardTracker\";\r\nimport FooterText from \"./components/FooterText\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cards: [],\r\n      userInput: \"\",\r\n      card: [],\r\n      color: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      // event listener for db value change\r\n\r\n      const data = snapshot.val();\r\n\r\n      const newCardsArray = [];\r\n\r\n      // state setter preparation loops\r\n      for (let propertyName in data) {\r\n        const newCardObj = {\r\n          id: propertyName,\r\n          card: data[propertyName],\r\n        };\r\n        newCardsArray.push(newCardObj);\r\n      }\r\n\r\n      // state setter sets state as arrays prepared from database snapshot\r\n      this.setState({\r\n        cards: newCardsArray,\r\n      });\r\n    });\r\n  }\r\n\r\n  // updates database on click with user input\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    axios({\r\n      url: `https://api.scryfall.com/cards/named`,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      params: {\r\n        exact: `${this.state.userInput}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        this.setState(\r\n          {\r\n            card: response.data,\r\n          },\r\n          () => {\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(this.state.card);\r\n            alert(`Added ${this.state.userInput} to your collection!`);\r\n            this.setState({\r\n              userInput: \"\",\r\n            });\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Invalid card name! Please ensure correct spelling.\");\r\n        this.setState({\r\n          userInput: \"\",\r\n        });\r\n      });\r\n  };\r\n\r\n  // binds state to user input\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value,\r\n    });\r\n  };\r\n\r\n  // populate state with selected color\r\n  handleFilter = (event) => {\r\n    this.setState({\r\n      color: event.target.value,\r\n    });\r\n  };\r\n\r\n  // database deletion function\r\n  deleteCard = (cardID) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(cardID).remove();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <header>\r\n            <a href=\"#mainContent\" className=\"skip-link\">\r\n              Jump directly to main content\r\n            </a>\r\n            <div className=\"wrapper\">\r\n              <div className=\"inputBox\">\r\n                <h1>magic: the gathering collection manager</h1>\r\n                <p>\r\n                  type a magic:the gathering card name into the box below to add\r\n                  that card to your collection. invalid card names will not\r\n                  update your list.\r\n                </p>\r\n                <form action=\"submit\">\r\n                  <label htmlFor=\"newCard\">\r\n                    Add a card to your collection:{\" \"}\r\n                  </label>\r\n                  <input\r\n                    onChange={this.handleChange}\r\n                    // binding input\r\n                    value={this.state.userInput}\r\n                    type=\"text\"\r\n                    id=\"newCard\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"ex: Sol Ring\"\r\n                    tabIndex=\"0\"\r\n                    aria-label=\"text input for magic card\"\r\n                  />\r\n                  {/* prevent user from submitting empty string */}\r\n                  {!this.state.userInput.replace(/\\s/g, \"\").length ? (\r\n                    <span>Awaiting input...</span>\r\n                  ) : (\r\n                    <button\r\n                      aria-label=\"add card to collection\"\r\n                      onClick={this.handleClick}\r\n                    >\r\n                      Add Card\r\n                    </button>\r\n                  )}\r\n                </form>\r\n                <div className=\"filterButtons\">\r\n                  <FilterForm handleFilter={this.handleFilter} />\r\n                  <Link\r\n                    to=\"/filteredCards\"\r\n                    aria-label=\"assign filter color to collection\"\r\n                  >\r\n                    Filter Collection\r\n                  </Link>\r\n                  <Link\r\n                    to=\"/spencerDavisProjectFive\"\r\n                    aria-label=\"clear filter and return to home page\"\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        color: \"\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    Clear Filters\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 1440 320\"\r\n              aria-labelledby=\"title desc\"\r\n            >\r\n              <title>dark grey square wave</title>\r\n              <desc>\r\n                a dark grey square wave with a flat bottom and stair-stepped top\r\n              </desc>\r\n              <path\r\n                fill=\"#292D25\"\r\n                fillOpacity=\"1\"\r\n                d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\r\n              ></path>\r\n            </svg>\r\n          </header>\r\n          <main id=\"mainContent\">\r\n            <div className=\"wrapper\">\r\n              <Route\r\n                exact\r\n                path=\"/spencerDavisProjectFive\"\r\n                render={() => {\r\n                  return (\r\n                    <>\r\n                      <CardTracker\r\n                        deleteCard={this.deleteCard}\r\n                        cards={this.state.cards}\r\n                      />\r\n                    </>\r\n                  );\r\n                }}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/filteredCards\"\r\n                render={() => {\r\n                  return (\r\n                    <>\r\n                      <FilteredCardTracker\r\n                        deleteCard={this.deleteCard}\r\n                        cards={this.state.cards}\r\n                        color={this.state.color}\r\n                      />\r\n                    </>\r\n                  );\r\n                }}\r\n              />\r\n              <Link\r\n                to=\"/spencerDavisProjectFive\"\r\n                aria-label=\"clear filter and return to home page\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    color: \"\",\r\n                  });\r\n                }}\r\n              >\r\n                Clear Filters\r\n              </Link>\r\n            </div>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 1440 320\"\r\n              aria-labelledby=\"title desc\"\r\n            >\r\n              <title>deep blue square wave</title>\r\n              <desc>\r\n                a deep blue square wave with a flat bottom and stair-stepped\r\n                top. it matches the one above.\r\n              </desc>\r\n              <path\r\n                fill=\"#273e47\"\r\n                fillOpacity=\"1\"\r\n                d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\r\n              ></path>\r\n            </svg>\r\n          </main>\r\n          <footer>\r\n            <FooterText />\r\n          </footer>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}