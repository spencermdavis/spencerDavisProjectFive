{"version":3,"sources":["firebase.js","CardInput.js","DeleteButton.js","CardTracker.js","FooterText.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CardInput","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","database","ref","push","state","card","action","htmlFor","onChange","this","type","id","autoComplete","placeholder","required","tabIndex","replace","length","aria-label","onClick","Component","DeleteButton","props","cards","deleteCard","thisIndex","CardTracker","apiData","map","newCardObj","index","key","className","src","image_uris","normal","alt","name","mana_cost","cmc","oracle_text","FooterText","href","App","cardID","child","remove","cardData","apiCards","on","snapshot","data","val","newCardsArray","propertyName","axiosArr","newerCardObj","axios","post","identifiers","then","response","xmlns","viewBox","aria-labelledby","fill","fillOpacity","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a5057e6.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA-LzH3x6y4GOQRQvK4Htenjgf7DMYWrro\",\r\n  authDomain: \"spencer-davis-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://spencer-davis-project-five.firebaseio.com\",\r\n  projectId: \"spencer-davis-project-five\",\r\n  storageBucket: \"spencer-davis-project-five.appspot.com\",\r\n  messagingSenderId: \"998632952490\",\r\n  appId: \"1:998632952490:web:4493592177e848c8cab6d3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\n\r\nclass CardInput extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n      card: \"\",\r\n    };\r\n  }\r\n\r\n  // binds state to user input\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value,\r\n    });\r\n  };\r\n\r\n  // updates database on click with user input\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.push(this.state.userInput);\r\n\r\n    this.setState({\r\n      userInput: \"\",\r\n      card: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form action=\"submit\">\r\n        <label htmlFor=\"newCard\">Add a card to your collection: </label>\r\n        <input\r\n          onChange={this.handleChange}\r\n          // binding input\r\n          value={this.state.userInput}\r\n          type=\"text\"\r\n          id=\"newCard\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"Sol Ring\"\r\n          required\r\n          tabIndex=\"0\"\r\n        />\r\n        {/* prevent user from submitting empty string */}\r\n        {!this.state.userInput.replace(/\\s/g, \"\").length ? (\r\n          <button aria-label=\"card not yet input\">Missing card input</button>\r\n        ) : (\r\n          <button\r\n            aria-label=\"add card to collection\"\r\n            onClick={this.handleClick}\r\n          >\r\n            Add Card\r\n          </button>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass DeleteButton extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* page returns error with empty database */}\r\n        {/* ensure user can never fully empty database */}\r\n        {this.props.cards.length > 1 ? (\r\n          <button\r\n            tabIndex=\"0\"\r\n            aria-label=\"delete card from collection\"\r\n            onClick={() => {\r\n              this.props.deleteCard(this.props.cards[this.props.thisIndex].id);\r\n            }}\r\n          >\r\n            Remove Card\r\n          </button>\r\n        ) : (\r\n          <button\r\n            tabIndex=\"0\"\r\n            aria-label=\"cannot delete card collection must always have at least one card\"\r\n          >\r\n            Cannot delete card\r\n          </button>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React, { Component } from \"react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nclass CardTracker extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {/* returns api data for react to append to dom */}\r\n        {this.props.apiData.map((newCardObj, index) => {\r\n          return (\r\n            <li key={index} className=\"displayCard\">\r\n              <div className=\"displayCardInner\">\r\n                <div className=\"displayCardFront\">\r\n                  <div className=\"imageContainer\">\r\n                    <img\r\n                      src={newCardObj.image_uris.normal}\r\n                      alt={newCardObj.name}\r\n                      tabIndex=\"0\"\r\n                    ></img>\r\n                    <h2 tabIndex=\"0\">{newCardObj.name}</h2>\r\n                  </div>\r\n                </div>\r\n                <div className=\"displayCardBack\">\r\n                  <ul>\r\n                    <li tabIndex=\"0\">mana cost: {newCardObj.mana_cost}</li>\r\n                    <li tabIndex=\"0\">converted mana cost: {newCardObj.cmc}</li>\r\n                    <li tabIndex=\"0\">oracle text: {newCardObj.oracle_text}</li>\r\n                  </ul>\r\n                  <DeleteButton\r\n                    thisIndex={index}\r\n                    cards={this.props.cards}\r\n                    deleteCard={this.props.deleteCard}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardTracker;\r\n","import React from \"react\";\r\n\r\nconst FooterText = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p>copyright &copy; spencer davis 2020</p>\r\n      <p>\r\n        created @<a href=\"https://junocollege.com/\">Juno College</a>\r\n      </p>\r\n      <p>\r\n        data courtesy of the{\" \"}\r\n        <a href=\"https://scryfall.com/docs/api/\">scryfall api</a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterText;\r\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport axios from \"axios\";\nimport CardInput from \"./CardInput\";\nimport \"./App.scss\";\nimport CardTracker from \"./CardTracker\";\nimport FooterText from \"./FooterText\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: [],\n      cardData: {},\n      apiCards: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      // event listener for db value change\n\n      const data = snapshot.val();\n\n      const newCardsArray = [];\n\n      // state setter preparation loops\n      for (let propertyName in data) {\n        const newCardObj = {\n          id: propertyName,\n          card: data[propertyName],\n        };\n        newCardsArray.push(newCardObj);\n      }\n\n      const axiosArr = [];\n\n      for (let propertyName in data) {\n        const newerCardObj = {\n          name: data[propertyName],\n        };\n        axiosArr.push(newerCardObj);\n      }\n\n      // state setter sets state as arrays prepared from database snapshot\n      this.setState(\n        {\n          cards: newCardsArray,\n          cardData: axiosArr,\n        },\n        // callback structure ensures api call stateful array is ready to be passed\n        () => {\n          axios\n            .post(\"https://api.scryfall.com/cards/collection\", {\n              identifiers: this.state.cardData,\n            })\n            .then((response) => {\n              this.setState({\n                apiCards: response.data.data,\n              });\n            });\n        }\n      );\n    });\n  }\n\n  // database deletion function\n  deleteCard = (cardID) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(cardID).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <div className=\"inputBox\">\n              <h1 tabIndex=\"0\">magic: the gathering collection manager</h1>\n              <p tabIndex=\"0\">\n                type a magic:the gathering card name into the box below to add\n                that card to your collection. invalid card names will not update\n                your list.\n              </p>\n              <CardInput />\n            </div>\n          </div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 1440 320\"\n            aria-labelledby=\"title desc\"\n          >\n            <title>dark grey square wave</title>\n            <desc>\n              a dark grey square wave with a flat bottom and stair-stepped top\n            </desc>\n            <path\n              fill=\"#292D25\"\n              fillOpacity=\"1\"\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\n            ></path>\n          </svg>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <CardTracker\n              deleteCard={this.deleteCard}\n              cards={this.state.cards}\n              apiData={this.state.apiCards}\n            />\n            {/* <ApiAppender apiData={this.state.apiCards} /> */}\n          </div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 1440 320\"\n            aria-labelledby=\"title desc\"\n          >\n            <title>deep blue square wave</title>\n            <desc>\n              a deep blue square wave with a flat bottom and stair-stepped top.\n              it matches the one above.\n            </desc>\n            <path\n              fill=\"#273e47\"\n              fillOpacity=\"1\"\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\n            ></path>\n          </svg>\n        </main>\n        <footer>\n          <FooterText />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}