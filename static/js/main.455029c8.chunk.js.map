{"version":3,"sources":["firebase.js","components/DeleteButton.js","components/DisplayCard.js","components/CardTracker.js","components/FooterText.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DeleteButton","props","tabIndex","aria-label","className","onClick","deleteCard","thisCard","id","DisplayCard","src","image","alt","name","mana_cost","cmc","oracle_text","cards","CardTracker","map","newCardObj","index","key","card","image_uris","normal","FooterText","href","App","handleClick","event","preventDefault","axios","url","method","responseType","params","exact","state","userInput","then","response","setState","data","database","ref","push","alert","catch","error","handleChange","target","value","cardID","child","remove","on","snapshot","val","newCardsArray","propertyName","action","htmlFor","onChange","this","type","autoComplete","placeholder","replace","length","xmlns","viewBox","aria-labelledby","fill","fillOpacity","d","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uUAeAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,eACnBC,MAAO,8CAMMR,QAAf,E,yBCDeS,EAfM,SAACC,GACpB,OACE,4BACEC,SAAS,IACTC,aAAW,8BACXC,UAAU,eACVC,QAAS,WACPJ,EAAMK,WAAWL,EAAMM,SAASC,MALpC,gBCyBWC,EA1BK,SAACR,GACnB,OACE,yBAAKG,UAAU,oBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,yBAAKM,IAAKT,EAAMU,MAAOC,IAAKX,EAAMY,OAClC,4BAAKZ,EAAMY,QAGf,yBAAKT,UAAU,mBACb,4BACE,0CAAgBH,EAAMa,WACtB,oDAA0Bb,EAAMc,KAChC,4CAAkBd,EAAMe,cAE1B,kBAAC,EAAD,CACEd,SAAS,IACTK,SAAUN,EAAMM,SAChBU,MAAOhB,EAAMgB,MACbX,WAAYL,EAAMK,gBCKbY,EAxBK,SAACjB,GACnB,OACE,4BAEGA,EAAMgB,MAAME,KAAI,SAACC,EAAYC,GAC5B,OACE,wBAAIC,IAAKD,EAAOjB,UAAU,cAAcF,SAAS,KAC/C,kBAAC,EAAD,CACEK,SAAUa,EACVH,MAAOhB,EAAMgB,MACbX,WAAYL,EAAMK,WAClBK,MAAOS,EAAWG,KAAKC,WAAWC,OAClCZ,KAAMO,EAAWG,KAAKV,KACtBC,UAAWM,EAAWG,KAAKT,UAC3BC,IAAKK,EAAWG,KAAKR,IACrBC,YAAaI,EAAWG,KAAKP,oBCD5BU,EAfI,WACjB,OACE,yBAAKtB,UAAU,WACb,gEACA,uCACW,uBAAGuB,KAAK,4BAAR,iBAEX,kDACuB,IACrB,uBAAGA,KAAK,kCAAR,mBC2KOC,E,kDA9Kb,aAAe,IAAD,8BACZ,gBAmCFC,YAAc,SAACC,GACbA,EAAMC,iBAENC,IAAM,CACJC,IAAI,uCACJC,OAAO,MACPC,aAAa,OACbC,OAAQ,CACNC,MAAM,GAAD,OAAK,EAAKC,MAAMC,cAGtBC,MAAK,SAACC,GACL,EAAKC,SACH,CACEnB,KAAMkB,EAASE,OAEjB,WACgBpD,EAASqD,WAAWC,MAC5BC,KAAK,EAAKR,MAAMf,MACtBwB,MAAM,SAAD,OAAU,EAAKT,MAAMC,UAArB,yBACL,EAAKG,SAAS,CACZH,UAAW,WAKlBS,OAAM,SAACC,GACNF,MAAM,sDACN,EAAKL,SAAS,CACZH,UAAW,SAjEL,EAuEdW,aAAe,SAACpB,GACd,EAAKY,SAAS,CACZH,UAAWT,EAAMqB,OAAOC,SAzEd,EA8Ed9C,WAAa,SAAC+C,GACE9D,EAASqD,WAAWC,MAE5BS,MAAMD,GAAQE,UA/EpB,EAAKjB,MAAQ,CACXrB,MAAO,GACPsB,UAAW,GACXhB,KAAM,IALI,E,gEASO,IAAD,OACJhC,EAASqD,WAAWC,MAE5BW,GAAG,SAAS,SAACC,GAGjB,IAAMd,EAAOc,EAASC,MAEhBC,EAAgB,GAGtB,IAAK,IAAIC,KAAgBjB,EAAM,CAC7B,IAAMvB,EAAa,CACjBZ,GAAIoD,EACJrC,KAAMoB,EAAKiB,IAEbD,EAAcb,KAAK1B,GAIrB,EAAKsB,SAAS,CACZzB,MAAO0C,S,+BAuDX,OACE,yBAAKvD,UAAU,OACb,gCACE,uBAAGuB,KAAK,eAAevB,UAAU,aAAjC,iCAGA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,YACb,uEACA,yKAKA,0BAAMyD,OAAO,UACX,2BAAOC,QAAQ,WAAf,mCACA,2BACEC,SAAUC,KAAKd,aAEfE,MAAOY,KAAK1B,MAAMC,UAClB0B,KAAK,OACLzD,GAAG,UACH0D,aAAa,MACbC,YAAY,WACZjE,SAAS,IACTC,aAAW,8BAGX6D,KAAK1B,MAAMC,UAAU6B,QAAQ,MAAO,IAAIC,OAGxC,4BACElE,aAAW,yBACXE,QAAS2D,KAAKnC,aAFhB,YAFA,sDAYR,yBACEyC,MAAM,6BACNC,QAAQ,eACRC,kBAAgB,cAEhB,wDACA,kGAGA,0BACEC,KAAK,UACLC,YAAY,IACZC,EAAE,gLAIR,0BAAMnE,GAAG,eACP,yBAAKJ,UAAU,WACb,kBAAC,EAAD,CACEE,WAAY0D,KAAK1D,WACjBW,MAAO+C,KAAK1B,MAAMrB,SAGtB,yBACEqD,MAAM,6BACNC,QAAQ,eACRC,kBAAgB,cAEhB,wDACA,6HAIA,0BACEC,KAAK,UACLC,YAAY,IACZC,EAAE,gLAIR,gCACE,kBAAC,EAAD,Y,GAxKQC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.455029c8.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA-LzH3x6y4GOQRQvK4Htenjgf7DMYWrro\",\r\n  authDomain: \"spencer-davis-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://spencer-davis-project-five.firebaseio.com\",\r\n  projectId: \"spencer-davis-project-five\",\r\n  storageBucket: \"spencer-davis-project-five.appspot.com\",\r\n  messagingSenderId: \"998632952490\",\r\n  appId: \"1:998632952490:web:4493592177e848c8cab6d3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React from \"react\";\r\n\r\nconst DeleteButton = (props) => {\r\n  return (\r\n    <button\r\n      tabIndex=\"0\"\r\n      aria-label=\"delete card from collection\"\r\n      className=\"deleteButton\"\r\n      onClick={() => {\r\n        props.deleteCard(props.thisCard.id);\r\n      }}\r\n    >\r\n      Remove Card\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeleteButton;\r\n","import React from \"react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nconst DisplayCard = (props) => {\r\n  return (\r\n    <div className=\"displayCardInner\">\r\n      <div className=\"displayCardFront\">\r\n        <div className=\"imageContainer\">\r\n          <img src={props.image} alt={props.name}></img>\r\n          <h2>{props.name}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"displayCardBack\">\r\n        <ul>\r\n          <li>mana cost: {props.mana_cost}</li>\r\n          <li>converted mana cost: {props.cmc}</li>\r\n          <li>oracle text: {props.oracle_text}</li>\r\n        </ul>\r\n        <DeleteButton\r\n          tabIndex=\"0\"\r\n          thisCard={props.thisCard}\r\n          cards={props.cards}\r\n          deleteCard={props.deleteCard}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayCard;\r\n","import React from \"react\";\r\nimport DisplayCard from \"./DisplayCard\";\r\n\r\nconst CardTracker = (props) => {\r\n  return (\r\n    <ul>\r\n      {/* returns api data for react to append to dom */}\r\n      {props.cards.map((newCardObj, index) => {\r\n        return (\r\n          <li key={index} className=\"displayCard\" tabIndex=\"0\">\r\n            <DisplayCard\r\n              thisCard={newCardObj}\r\n              cards={props.cards}\r\n              deleteCard={props.deleteCard}\r\n              image={newCardObj.card.image_uris.normal}\r\n              name={newCardObj.card.name}\r\n              mana_cost={newCardObj.card.mana_cost}\r\n              cmc={newCardObj.card.cmc}\r\n              oracle_text={newCardObj.card.oracle_text}\r\n            ></DisplayCard>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CardTracker;\r\n","import React from \"react\";\r\n\r\nconst FooterText = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p>copyright &copy; spencer davis 2020</p>\r\n      <p>\r\n        created @<a href=\"https://junocollege.com/\">Juno College</a>\r\n      </p>\r\n      <p>\r\n        data courtesy of the{\" \"}\r\n        <a href=\"https://scryfall.com/docs/api/\">scryfall api</a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterText;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport \"./styles/App.scss\";\r\nimport axios from \"axios\";\r\nimport CardTracker from \"./components/CardTracker\";\r\nimport FooterText from \"./components/FooterText\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cards: [],\r\n      userInput: \"\",\r\n      card: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      // event listener for db value change\r\n\r\n      const data = snapshot.val();\r\n\r\n      const newCardsArray = [];\r\n\r\n      // state setter preparation loops\r\n      for (let propertyName in data) {\r\n        const newCardObj = {\r\n          id: propertyName,\r\n          card: data[propertyName],\r\n        };\r\n        newCardsArray.push(newCardObj);\r\n      }\r\n\r\n      // state setter sets state as arrays prepared from database snapshot\r\n      this.setState({\r\n        cards: newCardsArray,\r\n      });\r\n    });\r\n  }\r\n\r\n  // updates database on click with user input\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    axios({\r\n      url: `https://api.scryfall.com/cards/named`,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      params: {\r\n        exact: `${this.state.userInput}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        this.setState(\r\n          {\r\n            card: response.data,\r\n          },\r\n          () => {\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(this.state.card);\r\n            alert(`Added ${this.state.userInput} to your collection!`);\r\n            this.setState({\r\n              userInput: \"\",\r\n            });\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Invalid card name! Please ensure correct spelling.\");\r\n        this.setState({\r\n          userInput: \"\",\r\n        });\r\n      });\r\n  };\r\n\r\n  // binds state to user input\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value,\r\n    });\r\n  };\r\n\r\n  // database deletion function\r\n  deleteCard = (cardID) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(cardID).remove();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <a href=\"#mainContent\" className=\"skip-link\">\r\n            Jump directly to main content\r\n          </a>\r\n          <div className=\"wrapper\">\r\n            <div className=\"inputBox\">\r\n              <h1>magic: the gathering collection manager</h1>\r\n              <p>\r\n                type a magic:the gathering card name into the box below to add\r\n                that card to your collection. invalid card names will not update\r\n                your list.\r\n              </p>\r\n              <form action=\"submit\">\r\n                <label htmlFor=\"newCard\">Add a card to your collection: </label>\r\n                <input\r\n                  onChange={this.handleChange}\r\n                  // binding input\r\n                  value={this.state.userInput}\r\n                  type=\"text\"\r\n                  id=\"newCard\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"Sol Ring\"\r\n                  tabIndex=\"0\"\r\n                  aria-label=\"text input for magic card\"\r\n                />\r\n                {/* prevent user from submitting empty string */}\r\n                {!this.state.userInput.replace(/\\s/g, \"\").length ? (\r\n                  <span>Awaiting input...</span>\r\n                ) : (\r\n                  <button\r\n                    aria-label=\"add card to collection\"\r\n                    onClick={this.handleClick}\r\n                  >\r\n                    Add Card\r\n                  </button>\r\n                )}\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 1440 320\"\r\n            aria-labelledby=\"title desc\"\r\n          >\r\n            <title>dark grey square wave</title>\r\n            <desc>\r\n              a dark grey square wave with a flat bottom and stair-stepped top\r\n            </desc>\r\n            <path\r\n              fill=\"#292D25\"\r\n              fillOpacity=\"1\"\r\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\r\n            ></path>\r\n          </svg>\r\n        </header>\r\n        <main id=\"mainContent\">\r\n          <div className=\"wrapper\">\r\n            <CardTracker\r\n              deleteCard={this.deleteCard}\r\n              cards={this.state.cards}\r\n            />\r\n          </div>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 1440 320\"\r\n            aria-labelledby=\"title desc\"\r\n          >\r\n            <title>deep blue square wave</title>\r\n            <desc>\r\n              a deep blue square wave with a flat bottom and stair-stepped top.\r\n              it matches the one above.\r\n            </desc>\r\n            <path\r\n              fill=\"#273e47\"\r\n              fillOpacity=\"1\"\r\n              d=\"M0,224L0,96L288,96L288,32L576,32L576,128L864,128L864,224L1152,224L1152,96L1440,96L1440,320L1152,320L1152,320L864,320L864,320L576,320L576,320L288,320L288,320L0,320L0,320Z\"\r\n            ></path>\r\n          </svg>\r\n        </main>\r\n        <footer>\r\n          <FooterText />\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}