{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","event","setState","userInput","target","value","console","log","state","handleClick","preventDefault","database","ref","push","deleteBook","cardId","child","remove","cards","on","snapshot","data","val","newCardsArray","propertyName","newCardObj","id","card","className","action","htmlFor","onChange","this","type","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAeAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,eACnBC,MAAO,8CAMMR,QAAf,EC+FeS,G,wDA5Gb,aAAe,IAAD,8BACZ,gBAmCFC,aAAe,SAACC,GACd,EAAKC,SACH,CACEC,UAAWF,EAAMG,OAAOC,QAG1B,WACEC,QAAQC,IAAI,EAAKC,MAAML,eA3Cf,EAgDdM,YAAc,SAACR,GACbA,EAAMS,iBAEQpB,EAASqB,WAAWC,MAE5BC,KAAK,EAAKL,MAAML,WAEtB,EAAKD,SAAS,CACZC,UAAW,MAxDD,EA4DdW,WAAa,SAACC,GACZT,QAAQC,IAAIQ,GACEzB,EAASqB,WAAWC,MAE5BI,MAAMD,GAAQE,UA9DpB,EAAKT,MAAQ,CACXU,MAAO,GACPf,UAAW,IAJD,E,gEAQO,IAAD,OACJb,EAASqB,WAAWC,MAE5BO,GAAG,SAAS,SAACC,GAGjB,IAAMC,EAAOD,EAASE,MAEtBhB,QAAQC,IAAIc,GAEZ,IAAME,EAAgB,GAEtB,IAAK,IAAIC,KAAgBH,EAAM,CAC7B,IAAMI,EAAa,CACjBC,GAAIF,EACJG,KAAMN,EAAKG,IAEbD,EAAcV,KAAKY,GAGrBnB,QAAQC,IAAIgB,GAEZ,EAAKrB,SAAS,CACZgB,MAAOK,S,+BAoCH,IAAD,OACP,OACE,yBAAKK,UAAU,OACb,gCACE,uEAEA,0BAAMC,OAAO,UACX,2BAAOC,QAAQ,WAAf,iCACA,2BACEC,SAAUC,KAAKhC,aAEfK,MAAO2B,KAAKxB,MAAML,UAClB8B,KAAK,OACLP,GAAG,YAGL,4BAAQQ,QAASF,KAAKvB,aAAtB,cAGJ,4BAAKuB,KAAKxB,MAAML,WAChB,4BACG6B,KAAKxB,MAAMU,MAAMiB,KAAI,SAACV,GACrB,OACE,wBAAIW,IAAKX,EAAWC,IAClB,2BAAID,EAAWE,MACf,4BACEO,QAAS,WACP,EAAKpB,WAAWW,EAAWC,MAF/B,yB,GA7FEW,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.ce1a12c4.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA-LzH3x6y4GOQRQvK4Htenjgf7DMYWrro\",\r\n  authDomain: \"spencer-davis-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://spencer-davis-project-five.firebaseio.com\",\r\n  projectId: \"spencer-davis-project-five\",\r\n  storageBucket: \"spencer-davis-project-five.appspot.com\",\r\n  messagingSenderId: \"998632952490\",\r\n  appId: \"1:998632952490:web:4493592177e848c8cab6d3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: [],\n      userInput: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      // event listener for db value change\n\n      const data = snapshot.val();\n\n      console.log(data);\n\n      const newCardsArray = [];\n\n      for (let propertyName in data) {\n        const newCardObj = {\n          id: propertyName,\n          card: data[propertyName],\n        };\n        newCardsArray.push(newCardObj);\n      }\n\n      console.log(newCardsArray);\n\n      this.setState({\n        cards: newCardsArray,\n      });\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState(\n      {\n        userInput: event.target.value,\n      },\n      // necessary when we need to wait for state to finish setting before updating the page\n      () => {\n        console.log(this.state.userInput);\n      }\n    );\n  };\n\n  handleClick = (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n\n    dbRef.push(this.state.userInput);\n\n    this.setState({\n      userInput: \"\",\n    });\n  };\n\n  deleteBook = (cardId) => {\n    console.log(cardId);\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(cardId).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>magic: the gathering collection manager</h1>\n\n          <form action=\"submit\">\n            <label htmlFor=\"newCard\">Add a card to your collection</label>\n            <input\n              onChange={this.handleChange}\n              // this is called \"binding your input\" and is a project 5 requirement\n              value={this.state.userInput}\n              type=\"text\"\n              id=\"newCard\"\n            />\n\n            <button onClick={this.handleClick}>Add Card</button>\n          </form>\n        </header>\n        <h2>{this.state.userInput}</h2>\n        <ul>\n          {this.state.cards.map((newCardObj) => {\n            return (\n              <li key={newCardObj.id}>\n                <p>{newCardObj.card}</p>\n                <button\n                  onClick={() => {\n                    this.deleteBook(newCardObj.id);\n                  }}\n                >\n                  Remove Card\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}